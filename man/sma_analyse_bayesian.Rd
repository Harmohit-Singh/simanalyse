% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simanalyse-analyse-bayesian.R
\name{sma_analyse_bayesian}
\alias{sma_analyse_bayesian}
\title{Analyse data for a simulation study}
\usage{
sma_analyse_bayesian(sims = NULL, code, code.add = "",
  code.values = "", package = "rjags", monitor, inits = list(),
  n.adapt, batch = 5, max.save = 50000, max.time = 0.2,
  units = "mins", max.iter = .max_integer, n.chains = 3,
  deviance = TRUE, path = getOption("sims.path"),
  analysis = "analysis0000001", progress = FALSE,
  options = furrr::future_options(seed = TRUE))
}
\arguments{
\item{sims}{An nlists or nlist object of the data. If NULL, data files are read from \code{path}.}

\item{code}{A string of code to analyse the data. JAGS code must not be in a data or model block.}

\item{code.add}{A string of code to add at the end of \code{code} before analysing the data. This is useful for adding priors to the likelihood.}

\item{code.values}{A character vector to pass to sprintf before analysing the data. This is useful for varying choices of distributions, e.g. for assessing sensitivity to the choice of priors.}

\item{package}{A string with the name of the R package to analyse the data. Currently, only "rjags" is implemented.}

\item{monitor}{A character vector (or regular expression if a string) specifying the names of the stochastic nodes to output from the analysis. By default all stochastic nodes are included.}

\item{inits}{A list or a function. Initial values for the MCMC chains. If specifying a function, it should either have no arguments, or have a single argument named chain. In the latter case, the supplied function is called with the chain number as argument. In this way, initial values may be generated that depend systematically on the chain number.}

\item{n.adapt}{An integer specifying the number of adaptations for each analysis}

\item{batch}{An integer specifying the number of iterations in a batch. New batches are ran until at least one of convergence, max.time or max.iter is reached.}

\item{max.save}{An integer specifying the maximum number of samples to save. Whenever the saved object is to become larger than max.save, the first iterations are dropped so that the number of saved iterations does not exceed \code{max.save}. After each full cycle of max.save iterations dropped, the number of iterations in new batches is doubled while thinning is increased by a factor of 2 to keep the same effective number of iterations per batch.}

\item{max.time}{An integer specifying the maximum time in \code{units}. When that time is reached no further batches are ran.}

\item{units}{Character string specifying the units of time for \code{max.time}. See \code{difftime}.}

\item{max.iter}{An integer specifying the maximum number of iterations to run. Iterations that were dropped or thinned out count as iterations in this definition. When that number of iterations is reached no further batches are ran.}

\item{n.chains}{An integer greater than zero specifying the number of MCMC chains to run}

\item{deviance}{A flag. Indicates whether to monitor deviance for future DIC calculation.}

\item{path}{A string. If \code{sims} is NULL, sims are read from that path on disk and results are written to disk.}

\item{analysis}{If \code{path} is specified, a string for the name of the folder that contains the results.}

\item{progress}{A flag specifying whether to print a progress bar.}

\item{options}{The future specific options to use with the workers.}
}
\value{
A flag.
}
\description{
Analyse data for a simulation study. Allows data to be read from files and results to be written to files.
}
\examples{
 set.seed(10L)
 code <- "a ~ dnorm(mu,1)"
 sims <- sims::sims_simulate(code, parameters = nlist(mu=0), nsims=2)
 prior = "mu ~ dunif(-3,3)"
 result <- sma_analyse_bayesian(sims=sims,
                                       code = code,
                                       code.add = prior,
                                       n.adapt = 101,
                                       batch = 101,
                                       max.iter=101,
                                       monitor = "mu")
}
